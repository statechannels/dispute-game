/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleUtils, MerkleUtilsInterface } from "../MerkleUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "consensusLeafIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "disputedLeafIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSplits",
        type: "uint256",
      },
    ],
    name: "canSplitFurther",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "hiStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSplits",
        type: "uint256",
      },
    ],
    name: "expectedNumOfLeaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "generateRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "consensusStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "disputedStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSplits",
        type: "uint256",
      },
    ],
    name: "getLeafIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "witness",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "nodes",
            type: "bytes32[]",
          },
        ],
        internalType: "struct WitnessProof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    name: "validateWitness",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "";

export class MerkleUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleUtils> {
    return super.deploy(overrides || {}) as Promise<MerkleUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleUtils {
    return super.attach(address) as MerkleUtils;
  }
  connect(signer: Signer): MerkleUtils__factory {
    return super.connect(signer) as MerkleUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleUtilsInterface {
    return new utils.Interface(_abi) as MerkleUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleUtils {
    return new Contract(address, _abi, signerOrProvider) as MerkleUtils;
  }
}
