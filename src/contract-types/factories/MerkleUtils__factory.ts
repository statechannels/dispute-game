/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleUtils, MerkleUtilsInterface } from "../MerkleUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "generateRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "consensusStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "disputedStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSplits",
        type: "uint256",
      },
    ],
    name: "getLeafIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "witness",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "nodes",
            type: "bytes32[]",
          },
        ],
        internalType: "struct WitnessProof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    name: "validateWitness",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610f3b610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80630ad682101461005057806365b428cc146100805780639898dc10146100b0575b600080fd5b61006a6004803603810190610065919061070a565b6100e0565b6040516100779190610781565b60405180910390f35b61009a600480360381019061009591906107d2565b610210565b6040516100a79190610848565b60405180910390f35b6100ca60048036038101906100c591906109bc565b6102d0565b6040516100d79190610a14565b60405180910390f35b6000808360000135905060008460200135905060005b8580604001906101069190610a3e565b90508110156101ef57600060028361011e9190610ad0565b1461017a578580604001906101339190610a3e565b8281811061014457610143610b01565b5b905060200201358360405160200161015d929190610b51565b6040516020818303038152906040528051906020012092506101cd565b8286806040019061018b9190610a3e565b8381811061019c5761019b610b01565b5b905060200201356040516020016101b4929190610b51565b6040516020818303038152906040528051906020012092505b6002826101da9190610bac565b915080806101e790610bdd565b9150506100f6565b50838214156102035760019250505061020a565b6000925050505b92915050565b60008085108061022a57506102268484846103fb565b8510155b1561026a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026190610c83565b60405180910390fd5b60016102778585856103fb565b6102819190610ca3565b851415610290578290506102c8565b600061029d858585610445565b905060018110156102ad57600190505b85816102b99190610cd7565b856102c49190610d31565b9150505b949350505050565b6000806102dc83610467565b905060006102ea825161057c565b905060005b818110156103d55760008160026103069190610eba565b905060005b84518110156103c057600085828151811061032957610328610b01565b5b602002602001015186848461033e9190610d31565b8151811061034f5761034e610b01565b5b6020026020010151604051602001610368929190610b51565b6040516020818303038152906040528051906020012090508086838151811061039457610393610b01565b5b602002602001018181525050508160026103ae9190610cd7565b816103b99190610d31565b905061030b565b505080806103cd90610bdd565b9150506102ef565b50816000815181106103ea576103e9610b01565b5b602002602001015192505050919050565b6000600161040a858585610445565b106104235760018261041c9190610d31565b905061043e565b600184846104319190610ca3565b61043b9190610d31565b90505b9392505050565b60008184846104549190610ca3565b61045e9190610bac565b90509392505050565b60606000610475835161057c565b60026104819190610eba565b905060008167ffffffffffffffff81111561049f5761049e610879565b5b6040519080825280602002602001820160405280156104cd5781602001602082028036833780820191505090505b50905060005b828110156105715784518111610522578481815181106104f6576104f5610b01565b5b602002602001015182828151811061051157610510610b01565b5b60200260200101818152505061055e565b6040516020016040516020818303038152906040528051906020012082828151811061055157610550610b01565b5b6020026020010181815250505b808061056990610bdd565b9150506104d3565b819350505050919050565b6000806000905070010000000000000000000000000000000083106105b257608083901c92506080816105af9190610d31565b90505b6801000000000000000083106105d957604083901c92506040816105d69190610d31565b90505b64010000000083106105fc57602083901c92506020816105f99190610d31565b90505b62010000831061061d57601083901c925060108161061a9190610d31565b90505b610100831061063d57600883901c925060088161063a9190610d31565b90505b6010831061065c57600483901c92506004816106599190610d31565b90505b6004831061067b57600283901c92506002816106789190610d31565b90505b60028310610693576001816106909190610d31565b90505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000606082840312156106cb576106ca6106b0565b5b81905092915050565b6000819050919050565b6106e7816106d4565b81146106f257600080fd5b50565b600081359050610704816106de565b92915050565b60008060408385031215610721576107206106a6565b5b600083013567ffffffffffffffff81111561073f5761073e6106ab565b5b61074b858286016106b5565b925050602061075c858286016106f5565b9150509250929050565b60008115159050919050565b61077b81610766565b82525050565b60006020820190506107966000830184610772565b92915050565b6000819050919050565b6107af8161079c565b81146107ba57600080fd5b50565b6000813590506107cc816107a6565b92915050565b600080600080608085870312156107ec576107eb6106a6565b5b60006107fa878288016107bd565b945050602061080b878288016107bd565b935050604061081c878288016107bd565b925050606061082d878288016107bd565b91505092959194509250565b6108428161079c565b82525050565b600060208201905061085d6000830184610839565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108b182610868565b810181811067ffffffffffffffff821117156108d0576108cf610879565b5b80604052505050565b60006108e361069c565b90506108ef82826108a8565b919050565b600067ffffffffffffffff82111561090f5761090e610879565b5b602082029050602081019050919050565b600080fd5b6000610938610933846108f4565b6108d9565b9050808382526020820190506020840283018581111561095b5761095a610920565b5b835b81811015610984578061097088826106f5565b84526020840193505060208101905061095d565b5050509392505050565b600082601f8301126109a3576109a2610863565b5b81356109b3848260208601610925565b91505092915050565b6000602082840312156109d2576109d16106a6565b5b600082013567ffffffffffffffff8111156109f0576109ef6106ab565b5b6109fc8482850161098e565b91505092915050565b610a0e816106d4565b82525050565b6000602082019050610a296000830184610a05565b92915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610a5b57610a5a610a2f565b5b80840192508235915067ffffffffffffffff821115610a7d57610a7c610a34565b5b602083019250602082023603831315610a9957610a98610a39565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610adb8261079c565b9150610ae68361079c565b925082610af657610af5610aa1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610b4b610b46826106d4565b610b30565b82525050565b6000610b5d8285610b3a565b602082019150610b6d8284610b3a565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bb78261079c565b9150610bc28361079c565b925082610bd257610bd1610aa1565b5b828204905092915050565b6000610be88261079c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c1b57610c1a610b7d565b5b600182019050919050565b600082825260208201905092915050565b7f496e76616c696420696e64657800000000000000000000000000000000000000600082015250565b6000610c6d600d83610c26565b9150610c7882610c37565b602082019050919050565b60006020820190508181036000830152610c9c81610c60565b9050919050565b6000610cae8261079c565b9150610cb98361079c565b925082821015610ccc57610ccb610b7d565b5b828203905092915050565b6000610ce28261079c565b9150610ced8361079c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d2657610d25610b7d565b5b828202905092915050565b6000610d3c8261079c565b9150610d478361079c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d7c57610d7b610b7d565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610dde57808604811115610dba57610db9610b7d565b5b6001851615610dc95780820291505b8081029050610dd785610d87565b9450610d9e565b94509492505050565b600082610df75760019050610eb3565b81610e055760009050610eb3565b8160018114610e1b5760028114610e2557610e54565b6001915050610eb3565b60ff841115610e3757610e36610b7d565b5b8360020a915084821115610e4e57610e4d610b7d565b5b50610eb3565b5060208310610133831016604e8410600b8410161715610e895782820a905083811115610e8457610e83610b7d565b5b610eb3565b610e968484846001610d94565b92509050818404811115610ead57610eac610b7d565b5b81810290505b9392505050565b6000610ec58261079c565b9150610ed08361079c565b9250610efd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610de7565b90509291505056fea2646970667358221220e4bd71be570451234133a2a5ef5bd4af3c7ce547da20e8500021393f7b77e01064736f6c63430008090033";

export class MerkleUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleUtils> {
    return super.deploy(overrides || {}) as Promise<MerkleUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleUtils {
    return super.attach(address) as MerkleUtils;
  }
  connect(signer: Signer): MerkleUtils__factory {
    return super.connect(signer) as MerkleUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleUtilsInterface {
    return new utils.Interface(_abi) as MerkleUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleUtils {
    return new Contract(address, _abi, signerOrProvider) as MerkleUtils;
  }
}
