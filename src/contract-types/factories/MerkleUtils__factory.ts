/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleUtils, MerkleUtilsInterface } from "../MerkleUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "loStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "hiStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSplits",
        type: "uint256",
      },
    ],
    name: "expectedNumOfLeaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "generateRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "consensusStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "disputedStep",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSplits",
        type: "uint256",
      },
    ],
    name: "getLeafIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "witness",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "nodes",
            type: "bytes32[]",
          },
        ],
        internalType: "struct WitnessProof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    name: "validateWitness",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x611095610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80630ad682101461005b57806365b428cc1461008b57806372f57d8e146100bb5780639898dc10146100eb575b600080fd5b6100756004803603810190610070919061076c565b61011b565b60405161008291906107e3565b60405180910390f35b6100a560048036038101906100a09190610834565b61024b565b6040516100b291906108aa565b60405180910390f35b6100d560048036038101906100d091906108c5565b61030f565b6040516100e291906108aa565b60405180910390f35b61010560048036038101906101009190610a71565b610360565b6040516101129190610ac9565b60405180910390f35b6000808360000135905060008460200135905060005b8580604001906101419190610af3565b905081101561022a5760006002836101599190610b85565b146101b55785806040019061016e9190610af3565b8281811061017f5761017e610bb6565b5b9050602002013583604051602001610198929190610bf4565b604051602081830303815290604052805190602001209250610208565b828680604001906101c69190610af3565b838181106101d7576101d6610bb6565b5b905060200201356040516020016101ef929190610bf4565b6040516020818303038152906040528051906020012092505b6002826102159190610c4c565b9150808061022290610c7d565b915050610131565b508382141561023e57600192505050610245565b6000925050505b92915050565b600080851080610265575061026184848461030f565b8510155b156102a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029c90610d23565b60405180910390fd5b60008285856102b49190610d43565b6102be9190610c4c565b14156102d75784846102d09190610d77565b9050610307565b848285856102e59190610d43565b6102ef9190610c4c565b6102f99190610dcd565b846103049190610d77565b90505b949350505050565b60008082858561031f9190610d43565b119050801561033d576001836103359190610d77565b915050610359565b6001858561034b9190610d43565b6103559190610d77565b9150505b9392505050565b60008061036c8361048b565b9050600061037a82516105de565b905060005b818110156104655760008160026103969190610f5a565b905060005b84518110156104505760008582815181106103b9576103b8610bb6565b5b60200260200101518684846103ce9190610d77565b815181106103df576103de610bb6565b5b60200260200101516040516020016103f8929190610fc6565b6040516020818303038152906040528051906020012090508086838151811061042457610423610bb6565b5b6020026020010181815250505081600261043e9190610dcd565b816104499190610d77565b905061039b565b5050808061045d90610c7d565b91505061037f565b508160008151811061047a57610479610bb6565b5b602002602001015192505050919050565b6060600061049983516105de565b905082518160026104aa9190610f5a565b14156104b957829150506105d9565b60006001826104c89190610d77565b60026104d49190610f5a565b905060008167ffffffffffffffff8111156104f2576104f161092e565b5b6040519080825280602002602001820160405280156105205781602001602082028036833780820191505090505b50905060005b828110156105d15785518110156105765785818151811061054a57610549610bb6565b5b602002602001015182828151811061056557610564610bb6565b5b6020026020010181815250506105be565b60006040516020016105889190611044565b604051602081830303815290604052805190602001208282815181106105b1576105b0610bb6565b5b6020026020010181815250505b80806105c990610c7d565b915050610526565b819450505050505b919050565b60008060009050700100000000000000000000000000000000831061061457608083901c92506080816106119190610d77565b90505b68010000000000000000831061063b57604083901c92506040816106389190610d77565b90505b640100000000831061065e57602083901c925060208161065b9190610d77565b90505b62010000831061067f57601083901c925060108161067c9190610d77565b90505b610100831061069f57600883901c925060088161069c9190610d77565b90505b601083106106be57600483901c92506004816106bb9190610d77565b90505b600483106106dd57600283901c92506002816106da9190610d77565b90505b600283106106f5576001816106f29190610d77565b90505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b60006060828403121561072d5761072c610712565b5b81905092915050565b6000819050919050565b61074981610736565b811461075457600080fd5b50565b60008135905061076681610740565b92915050565b6000806040838503121561078357610782610708565b5b600083013567ffffffffffffffff8111156107a1576107a061070d565b5b6107ad85828601610717565b92505060206107be85828601610757565b9150509250929050565b60008115159050919050565b6107dd816107c8565b82525050565b60006020820190506107f860008301846107d4565b92915050565b6000819050919050565b610811816107fe565b811461081c57600080fd5b50565b60008135905061082e81610808565b92915050565b6000806000806080858703121561084e5761084d610708565b5b600061085c8782880161081f565b945050602061086d8782880161081f565b935050604061087e8782880161081f565b925050606061088f8782880161081f565b91505092959194509250565b6108a4816107fe565b82525050565b60006020820190506108bf600083018461089b565b92915050565b6000806000606084860312156108de576108dd610708565b5b60006108ec8682870161081f565b93505060206108fd8682870161081f565b925050604061090e8682870161081f565b9150509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109668261091d565b810181811067ffffffffffffffff821117156109855761098461092e565b5b80604052505050565b60006109986106fe565b90506109a4828261095d565b919050565b600067ffffffffffffffff8211156109c4576109c361092e565b5b602082029050602081019050919050565b600080fd5b60006109ed6109e8846109a9565b61098e565b90508083825260208201905060208402830185811115610a1057610a0f6109d5565b5b835b81811015610a395780610a258882610757565b845260208401935050602081019050610a12565b5050509392505050565b600082601f830112610a5857610a57610918565b5b8135610a688482602086016109da565b91505092915050565b600060208284031215610a8757610a86610708565b5b600082013567ffffffffffffffff811115610aa557610aa461070d565b5b610ab184828501610a43565b91505092915050565b610ac381610736565b82525050565b6000602082019050610ade6000830184610aba565b92915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610b1057610b0f610ae4565b5b80840192508235915067ffffffffffffffff821115610b3257610b31610ae9565b5b602083019250602082023603831315610b4e57610b4d610aee565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b90826107fe565b9150610b9b836107fe565b925082610bab57610baa610b56565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610bee81610736565b82525050565b6000604082019050610c096000830185610be5565b610c166020830184610be5565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c57826107fe565b9150610c62836107fe565b925082610c7257610c71610b56565b5b828204905092915050565b6000610c88826107fe565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cbb57610cba610c1d565b5b600182019050919050565b600082825260208201905092915050565b7f496e76616c696420696e64657800000000000000000000000000000000000000600082015250565b6000610d0d600d83610cc6565b9150610d1882610cd7565b602082019050919050565b60006020820190508181036000830152610d3c81610d00565b9050919050565b6000610d4e826107fe565b9150610d59836107fe565b925082821015610d6c57610d6b610c1d565b5b828203905092915050565b6000610d82826107fe565b9150610d8d836107fe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc257610dc1610c1d565b5b828201905092915050565b6000610dd8826107fe565b9150610de3836107fe565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1c57610e1b610c1d565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610e7e57808604811115610e5a57610e59610c1d565b5b6001851615610e695780820291505b8081029050610e7785610e27565b9450610e3e565b94509492505050565b600082610e975760019050610f53565b81610ea55760009050610f53565b8160018114610ebb5760028114610ec557610ef4565b6001915050610f53565b60ff841115610ed757610ed6610c1d565b5b8360020a915084821115610eee57610eed610c1d565b5b50610f53565b5060208310610133831016604e8410600b8410161715610f295782820a905083811115610f2457610f23610c1d565b5b610f53565b610f368484846001610e34565b92509050818404811115610f4d57610f4c610c1d565b5b81810290505b9392505050565b6000610f65826107fe565b9150610f70836107fe565b9250610f9d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e87565b905092915050565b6000819050919050565b610fc0610fbb82610736565b610fa5565b82525050565b6000610fd28285610faf565b602082019150610fe28284610faf565b6020820191508190509392505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061102e61102961102484610ff2565b611009565b610ffc565b9050919050565b61103e81611013565b82525050565b60006020820190506110596000830184611035565b9291505056fea2646970667358221220216b3d260ded93cf8bd0ee3b7c599fc6f46381616920a3cd143546bd096e871964736f6c63430008090033";

export class MerkleUtils__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleUtils> {
    return super.deploy(overrides || {}) as Promise<MerkleUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleUtils {
    return super.attach(address) as MerkleUtils;
  }
  connect(signer: Signer): MerkleUtils__factory {
    return super.connect(signer) as MerkleUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleUtilsInterface {
    return new utils.Interface(_abi) as MerkleUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleUtils {
    return new Contract(address, _abi, signerOrProvider) as MerkleUtils;
  }
}
